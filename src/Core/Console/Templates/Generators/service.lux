<?php

namespace {{namespace}}\Services;

use {{namespace}}\Repositories\{{repositoryClass}};
{{#if withValidation}}
use {{namespace}}\Validators\{{validatorClass}};
{{/if}}
{{#if withEvents}}
use {{namespace}}\Events\{{eventClass}};
{{/if}}

/**
 * {{className}}
 * 
 * Business logic for {{entityName}}
 * Generated by Mi on {{timestamp}}
 */
class {{className}}
{
    protected {{repositoryClass}} $repository;
    {{#if withValidation}}
    protected {{validatorClass}} $validator;
    {{/if}}

    public function __construct(
        {{repositoryClass}} $repository{{#if withValidation}},
        {{validatorClass}} $validator{{/if}}
    ) {
        $this->repository = $repository;
        {{#if withValidation}}
        $this->validator = $validator;
        {{/if}}
    }

    /**
     * Get all records
     */
    public function getAll(): array
    {
        return $this->repository->findAll();
    }

    /**
     * Get by ID
     */
    public function getById(int $id): ?object
    {
        return $this->repository->find($id);
    }

    /**
     * Create new record
     */
    public function create(array $data): object
    {
        {{#if withValidation}}
        $this->validator->validate($data);
        {{/if}}
        
        {{#if withEvents}}
        event(new {{eventClass}}('creating', $data));
        {{/if}}
        
        $entity = $this->repository->create($data);
        
        {{#if withEvents}}
        event(new {{eventClass}}('created', $entity));
        {{/if}}
        
        return $entity;
    }

    /**
     * Update record
     */
    public function update(int $id, array $data): ?object
    {
        $entity = $this->repository->find($id);
        
        if (!$entity) {
            return null;
        }

        {{#if withValidation}}
        $this->validator->validate($data, $id);
        {{/if}}
        
        {{#if withEvents}}
        event(new {{eventClass}}('updating', $entity, $data));
        {{/if}}
        
        $updated = $this->repository->update($entity, $data);
        
        {{#if withEvents}}
        event(new {{eventClass}}('updated', $updated));
        {{/if}}
        
        return $updated;
    }

    /**
     * Delete record
     */
    public function delete(int $id): bool
    {
        $entity = $this->repository->find($id);
        
        if (!$entity) {
            return false;
        }

        {{#if withEvents}}
        event(new {{eventClass}}('deleting', $entity));
        {{/if}}
        
        $result = $this->repository->delete($entity);
        
        {{#if withEvents}}
        if ($result) {
            event(new {{eventClass}}('deleted', $entity));
        }
        {{/if}}
        
        return $result;
    }

    {{#if withSearch}}
    /**
     * Search records
     */
    public function search(string $query, array $filters = []): array
    {
        return $this->repository->search($query, $filters);
    }
    {{/if}}

    {{#if withPagination}}
    /**
     * Get paginated results
     */
    public function paginate(int $page = 1, int $perPage = 15): array
    {
        return $this->repository->paginate($page, $perPage);
    }
    {{/if}}

    {{#each customMethods}}
    /**
     * {{description}}
     */
    public function {{name}}({{parameters}}): {{returnType}}
    {
        {{body}}
    }
    
    {{/each}}
}